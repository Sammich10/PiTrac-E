name: PR Code Quality (Changes only)

on:
  pull_request:
    branches: [ master, develop ]

jobs:
  lint-changed-files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
          src/**/*.cpp
          src/**/*.c
          src/**/*.h
          src/**/*.hpp
        
    - name: Install linting tools
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y uncrustify cppcheck python3-pip
        pip3 install cpplint
        
    - name: Check formatting on changed files
      if: steps.changed-files.outputs.any_changed == 'true'
      id: format-check
      continue-on-error: true
      run: |
        # Check each file individually and collect failures
        FAILED_FILES=""
        TOTAL_FILES=0
        FAILED_COUNT=0
        
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          TOTAL_FILES=$((TOTAL_FILES + 1))
          if ! uncrustify -c .github/workflows/uncrustify.cfg --check -q "$file"; then
            echo "‚ùå Failed: $file"
            FAILED_FILES="$FAILED_FILES$file\n"
            FAILED_COUNT=$((FAILED_COUNT + 1))
          else
            echo "‚úÖ Passed: $file"
          fi
        done

        echo ""
        echo "=== FORMATTING CHECK SUMMARY ==="
        echo "Total files checked: $TOTAL_FILES"
        echo "Files passed: $((TOTAL_FILES - FAILED_COUNT))"
        echo "Files failed: $FAILED_COUNT"
        
        if [ $FAILED_COUNT -gt 0 ]; then
          echo ""
          echo "‚ùå FILES THAT FAILED FORMATTING CHECK:"
          echo -e "$FAILED_FILES"
          echo ""
          echo "To fix these files, run:"
          echo "uncrustify -c .github/workflows/uncrustify.cfg --replace --no-backup <filename>"
          echo ""
          echo "Or to fix all at once:"
          echo "find src/ -name '*.cpp' -o -name '*.h' -o -name '*.hpp' -o -name '*.c' | xargs uncrustify -c .github/workflows/uncrustify.cfg --replace --no-backup"
          exit 1
        else
          echo "‚úÖ All files passed formatting check!"
        fi
        
    - name: Run cppcheck on changed files
      if: steps.changed-files.outputs.any_changed == 'true'
      id: cppcheck
      continue-on-error: true
      run: |
        cppcheck --enable=warning,style,performance,portability \
          --std=c++17 \
          --suppress=missingIncludeSystem \
          --error-exitcode=1 \
          ${{ steps.changed-files.outputs.all_changed_files }}

    - name: Check for TODO/FIXME comments
      id: todo-check
      continue-on-error: true
      run: |
        echo "Checking for TODO/FIXME comments..."
        if grep -r "TODO\|FIXME" src/ --include="*.cpp" --include="*.h" --include="*.hpp"; then
          echo "‚ö†Ô∏è Found TODO/FIXME comments. Consider addressing them."
          exit 1
        fi
    
    - name: Quality check summary and final status
      if: always()
      run: |
        echo "=== Code Quality Summary ==="
        
        # Track failures
        FAILED_CHECKS=""
        
        if [ "${{ steps.format-check.outcome }}" = "failure" ]; then
          echo "‚ùå Code Formatting: Issues found"
          FAILED_CHECKS="$FAILED_CHECKS formatting"
        else
          echo "‚úÖ Code Formatting: No issues"
        fi
        
        if [ "${{ steps.cppcheck.outcome }}" = "failure" ]; then
          echo "‚ùå Cppcheck: Issues found"
          FAILED_CHECKS="$FAILED_CHECKS cppcheck"
        else
          echo "‚úÖ Cppcheck: No issues"
        fi
        
        if [ "${{ steps.todo-check.outcome }}" = "failure" ]; then
          echo "‚ùå TODO/FIXME: Comments found"
          FAILED_CHECKS="$FAILED_CHECKS todos"
        else
          echo "‚úÖ TODO/FIXME: No outstanding items"
        fi
        
        # Generate summary for GitHub
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# üîç Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "$FAILED_CHECKS" ]; then
          echo "## ‚ö†Ô∏è Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following checks found issues:" >> $GITHUB_STEP_SUMMARY
          for check in $FAILED_CHECKS; do
            echo "- $check" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Note: These issues are for informational purposes and do not block development._" >> $GITHUB_STEP_SUMMARY
          
          # Fail the workflow to show red X, but don't block PR
          echo "Quality checks found issues. Failing workflow for visibility."
          exit 1
        else
          echo "## ‚úÖ All Checks Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No code quality issues found!" >> $GITHUB_STEP_SUMMARY
          echo "All quality checks passed successfully."
        fi
        